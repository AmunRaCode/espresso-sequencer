pub use example_rollup::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod example_rollup {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hotshotAddress\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"firstBlock\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"count\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\",\"components\":[]}],\"type\":\"error\",\"name\":\"InvalidProof\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"verifiedBlocks\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"count\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"NotYetSequenced\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"StateUpdate\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"stateCommitment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"verifiedBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"count\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"nextStateCommitment\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"verifyBlocks\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static EXAMPLEROLLUP_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(|| {
            ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
        });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        97,
        4,
        99,
        56,
        3,
        128,
        97,
        4,
        99,
        131,
        57,
        129,
        1,
        96,
        64,
        129,
        144,
        82,
        97,
        0,
        47,
        145,
        97,
        0,
        92,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        144,
        146,
        22,
        145,
        144,
        145,
        23,
        129,
        85,
        96,
        1,
        129,
        144,
        85,
        96,
        2,
        85,
        97,
        0,
        140,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        0,
        110,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        0,
        133,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        97,
        3,
        200,
        128,
        97,
        0,
        155,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        65,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        132,
        152,
        6,
        126,
        20,
        97,
        0,
        70,
        87,
        128,
        99,
        190,
        51,
        197,
        169,
        20,
        97,
        0,
        97,
        87,
        128,
        99,
        216,
        0,
        116,
        30,
        20,
        97,
        0,
        118,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        79,
        96,
        2,
        84,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        116,
        97,
        0,
        111,
        54,
        96,
        4,
        97,
        2,
        194,
        86,
        91,
        97,
        0,
        127,
        86,
        91,
        0,
        91,
        97,
        0,
        79,
        96,
        1,
        84,
        129,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        144,
        84,
        144,
        97,
        1,
        0,
        10,
        144,
        4,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        244,
        79,
        247,
        18,
        96,
        64,
        81,
        129,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        0,
        211,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        0,
        247,
        145,
        144,
        97,
        3,
        82,
        86,
        91,
        144,
        80,
        128,
        133,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        96,
        2,
        84,
        97,
        1,
        18,
        145,
        144,
        97,
        3,
        107,
        86,
        91,
        16,
        97,
        1,
        82,
        87,
        96,
        2,
        84,
        96,
        64,
        81,
        99,
        240,
        56,
        72,
        103,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        145,
        144,
        145,
        82,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        134,
        22,
        96,
        36,
        130,
        1,
        82,
        96,
        68,
        129,
        1,
        130,
        144,
        82,
        96,
        100,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        128,
        84,
        96,
        2,
        84,
        96,
        64,
        81,
        99,
        73,
        206,
        137,
        151,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        146,
        22,
        145,
        99,
        73,
        206,
        137,
        151,
        145,
        97,
        1,
        136,
        145,
        96,
        4,
        1,
        144,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        1,
        165,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        1,
        201,
        145,
        144,
        97,
        3,
        82,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        2,
        84,
        146,
        147,
        80,
        144,
        145,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        144,
        99,
        73,
        206,
        137,
        151,
        144,
        97,
        1,
        252,
        144,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        139,
        22,
        144,
        97,
        3,
        107,
        86,
        91,
        96,
        64,
        81,
        130,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        2,
        26,
        145,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        2,
        55,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        2,
        91,
        145,
        144,
        97,
        3,
        82,
        86,
        91,
        144,
        80,
        134,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        96,
        2,
        96,
        0,
        130,
        130,
        84,
        97,
        2,
        121,
        145,
        144,
        97,
        3,
        107,
        86,
        91,
        144,
        145,
        85,
        80,
        80,
        96,
        1,
        134,
        144,
        85,
        96,
        2,
        84,
        96,
        64,
        81,
        144,
        129,
        82,
        127,
        150,
        8,
        5,
        231,
        223,
        197,
        204,
        56,
        126,
        13,
        176,
        184,
        246,
        180,
        166,
        163,
        250,
        251,
        232,
        122,
        158,
        6,
        105,
        213,
        5,
        85,
        136,
        137,
        118,
        43,
        0,
        179,
        144,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        96,
        133,
        135,
        3,
        18,
        21,
        97,
        2,
        216,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        22,
        130,
        20,
        97,
        2,
        241,
        87,
        96,
        0,
        128,
        253,
        91,
        144,
        148,
        80,
        96,
        32,
        134,
        1,
        53,
        147,
        80,
        96,
        64,
        134,
        1,
        53,
        144,
        128,
        130,
        17,
        21,
        97,
        3,
        14,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        135,
        1,
        145,
        80,
        135,
        96,
        31,
        131,
        1,
        18,
        97,
        3,
        34,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        3,
        49,
        87,
        96,
        0,
        128,
        253,
        91,
        136,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        3,
        67,
        87,
        96,
        0,
        128,
        253,
        91,
        149,
        152,
        148,
        151,
        80,
        80,
        96,
        32,
        1,
        148,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        3,
        100,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        81,
        145,
        144,
        80,
        86,
        91,
        128,
        130,
        1,
        128,
        130,
        17,
        21,
        97,
        3,
        140,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        146,
        145,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        94,
        160,
        135,
        118,
        43,
        193,
        190,
        31,
        191,
        43,
        169,
        201,
        156,
        8,
        109,
        70,
        216,
        61,
        111,
        214,
        222,
        179,
        235,
        212,
        41,
        39,
        254,
        153,
        146,
        176,
        82,
        146,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        18,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static EXAMPLEROLLUP_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        65,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        132,
        152,
        6,
        126,
        20,
        97,
        0,
        70,
        87,
        128,
        99,
        190,
        51,
        197,
        169,
        20,
        97,
        0,
        97,
        87,
        128,
        99,
        216,
        0,
        116,
        30,
        20,
        97,
        0,
        118,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        79,
        96,
        2,
        84,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        116,
        97,
        0,
        111,
        54,
        96,
        4,
        97,
        2,
        194,
        86,
        91,
        97,
        0,
        127,
        86,
        91,
        0,
        91,
        97,
        0,
        79,
        96,
        1,
        84,
        129,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        144,
        84,
        144,
        97,
        1,
        0,
        10,
        144,
        4,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        244,
        79,
        247,
        18,
        96,
        64,
        81,
        129,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        0,
        211,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        0,
        247,
        145,
        144,
        97,
        3,
        82,
        86,
        91,
        144,
        80,
        128,
        133,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        96,
        2,
        84,
        97,
        1,
        18,
        145,
        144,
        97,
        3,
        107,
        86,
        91,
        16,
        97,
        1,
        82,
        87,
        96,
        2,
        84,
        96,
        64,
        81,
        99,
        240,
        56,
        72,
        103,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        145,
        144,
        145,
        82,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        134,
        22,
        96,
        36,
        130,
        1,
        82,
        96,
        68,
        129,
        1,
        130,
        144,
        82,
        96,
        100,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        128,
        84,
        96,
        2,
        84,
        96,
        64,
        81,
        99,
        73,
        206,
        137,
        151,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        146,
        22,
        145,
        99,
        73,
        206,
        137,
        151,
        145,
        97,
        1,
        136,
        145,
        96,
        4,
        1,
        144,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        1,
        165,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        1,
        201,
        145,
        144,
        97,
        3,
        82,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        2,
        84,
        146,
        147,
        80,
        144,
        145,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        144,
        99,
        73,
        206,
        137,
        151,
        144,
        97,
        1,
        252,
        144,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        139,
        22,
        144,
        97,
        3,
        107,
        86,
        91,
        96,
        64,
        81,
        130,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        2,
        26,
        145,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        2,
        55,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        2,
        91,
        145,
        144,
        97,
        3,
        82,
        86,
        91,
        144,
        80,
        134,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        96,
        2,
        96,
        0,
        130,
        130,
        84,
        97,
        2,
        121,
        145,
        144,
        97,
        3,
        107,
        86,
        91,
        144,
        145,
        85,
        80,
        80,
        96,
        1,
        134,
        144,
        85,
        96,
        2,
        84,
        96,
        64,
        81,
        144,
        129,
        82,
        127,
        150,
        8,
        5,
        231,
        223,
        197,
        204,
        56,
        126,
        13,
        176,
        184,
        246,
        180,
        166,
        163,
        250,
        251,
        232,
        122,
        158,
        6,
        105,
        213,
        5,
        85,
        136,
        137,
        118,
        43,
        0,
        179,
        144,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        96,
        133,
        135,
        3,
        18,
        21,
        97,
        2,
        216,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        22,
        130,
        20,
        97,
        2,
        241,
        87,
        96,
        0,
        128,
        253,
        91,
        144,
        148,
        80,
        96,
        32,
        134,
        1,
        53,
        147,
        80,
        96,
        64,
        134,
        1,
        53,
        144,
        128,
        130,
        17,
        21,
        97,
        3,
        14,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        135,
        1,
        145,
        80,
        135,
        96,
        31,
        131,
        1,
        18,
        97,
        3,
        34,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        3,
        49,
        87,
        96,
        0,
        128,
        253,
        91,
        136,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        3,
        67,
        87,
        96,
        0,
        128,
        253,
        91,
        149,
        152,
        148,
        151,
        80,
        80,
        96,
        32,
        1,
        148,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        3,
        100,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        81,
        145,
        144,
        80,
        86,
        91,
        128,
        130,
        1,
        128,
        130,
        17,
        21,
        97,
        3,
        140,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        146,
        145,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        94,
        160,
        135,
        118,
        43,
        193,
        190,
        31,
        191,
        43,
        169,
        201,
        156,
        8,
        109,
        70,
        216,
        61,
        111,
        214,
        222,
        179,
        235,
        212,
        41,
        39,
        254,
        153,
        146,
        176,
        82,
        146,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        18,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static EXAMPLEROLLUP_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct ExampleRollup<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for ExampleRollup<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for ExampleRollup<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for ExampleRollup<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for ExampleRollup<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(ExampleRollup))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> ExampleRollup<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                EXAMPLEROLLUP_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                EXAMPLEROLLUP_ABI.clone(),
                EXAMPLEROLLUP_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `stateCommitment` (0xd800741e) function
        pub fn state_commitment(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([216, 0, 116, 30], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `verifiedBlocks` (0x8498067e) function
        pub fn verified_blocks(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([132, 152, 6, 126], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `verifyBlocks` (0xbe33c5a9) function
        pub fn verify_blocks(
            &self,
            count: u64,
            next_state_commitment: ::ethers::core::types::U256,
            proof: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([190, 51, 197, 169], (count, next_state_commitment, proof))
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `StateUpdate` event
        pub fn state_update_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, StateUpdateFilter>
        {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, StateUpdateFilter>
        {
            self.0
                .event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
        for ExampleRollup<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `InvalidProof` with signature `InvalidProof(uint256,uint64,bytes)` and selector `0xd735a1dd`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[etherror(name = "InvalidProof", abi = "InvalidProof(uint256,uint64,bytes)")]
    pub struct InvalidProof {
        pub first_block: ::ethers::core::types::U256,
        pub count: u64,
        pub proof: ::ethers::core::types::Bytes,
    }
    ///Custom Error type `NotYetSequenced` with signature `NotYetSequenced(uint256,uint64,uint256)` and selector `0xf0384867`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[etherror(
        name = "NotYetSequenced",
        abi = "NotYetSequenced(uint256,uint64,uint256)"
    )]
    pub struct NotYetSequenced {
        pub verified_blocks: ::ethers::core::types::U256,
        pub count: u64,
        pub block_height: ::ethers::core::types::U256,
    }
    ///Container type for all of the contract's custom errors
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum ExampleRollupErrors {
        InvalidProof(InvalidProof),
        NotYetSequenced(NotYetSequenced),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for ExampleRollupErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) =
                <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded) = <InvalidProof as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::InvalidProof(decoded));
            }
            if let Ok(decoded) = <NotYetSequenced as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::NotYetSequenced(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for ExampleRollupErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::InvalidProof(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::NotYetSequenced(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for ExampleRollupErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector == <InvalidProof as ::ethers::contract::EthError>::selector() => true,
                _ if selector == <NotYetSequenced as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for ExampleRollupErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::InvalidProof(element) => ::core::fmt::Display::fmt(element, f),
                Self::NotYetSequenced(element) => ::core::fmt::Display::fmt(element, f),
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for ExampleRollupErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<InvalidProof> for ExampleRollupErrors {
        fn from(value: InvalidProof) -> Self {
            Self::InvalidProof(value)
        }
    }
    impl ::core::convert::From<NotYetSequenced> for ExampleRollupErrors {
        fn from(value: NotYetSequenced) -> Self {
            Self::NotYetSequenced(value)
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethevent(name = "StateUpdate", abi = "StateUpdate(uint256)")]
    pub struct StateUpdateFilter {
        pub block_height: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `stateCommitment` function with signature `stateCommitment()` and selector `0xd800741e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "stateCommitment", abi = "stateCommitment()")]
    pub struct StateCommitmentCall;
    ///Container type for all input parameters for the `verifiedBlocks` function with signature `verifiedBlocks()` and selector `0x8498067e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "verifiedBlocks", abi = "verifiedBlocks()")]
    pub struct VerifiedBlocksCall;
    ///Container type for all input parameters for the `verifyBlocks` function with signature `verifyBlocks(uint64,uint256,bytes)` and selector `0xbe33c5a9`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "verifyBlocks", abi = "verifyBlocks(uint64,uint256,bytes)")]
    pub struct VerifyBlocksCall {
        pub count: u64,
        pub next_state_commitment: ::ethers::core::types::U256,
        pub proof: ::ethers::core::types::Bytes,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum ExampleRollupCalls {
        StateCommitment(StateCommitmentCall),
        VerifiedBlocks(VerifiedBlocksCall),
        VerifyBlocks(VerifyBlocksCall),
    }
    impl ::ethers::core::abi::AbiDecode for ExampleRollupCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) =
                <StateCommitmentCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::StateCommitment(decoded));
            }
            if let Ok(decoded) =
                <VerifiedBlocksCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::VerifiedBlocks(decoded));
            }
            if let Ok(decoded) = <VerifyBlocksCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::VerifyBlocks(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for ExampleRollupCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::StateCommitment(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::VerifiedBlocks(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::VerifyBlocks(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for ExampleRollupCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::StateCommitment(element) => ::core::fmt::Display::fmt(element, f),
                Self::VerifiedBlocks(element) => ::core::fmt::Display::fmt(element, f),
                Self::VerifyBlocks(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<StateCommitmentCall> for ExampleRollupCalls {
        fn from(value: StateCommitmentCall) -> Self {
            Self::StateCommitment(value)
        }
    }
    impl ::core::convert::From<VerifiedBlocksCall> for ExampleRollupCalls {
        fn from(value: VerifiedBlocksCall) -> Self {
            Self::VerifiedBlocks(value)
        }
    }
    impl ::core::convert::From<VerifyBlocksCall> for ExampleRollupCalls {
        fn from(value: VerifyBlocksCall) -> Self {
            Self::VerifyBlocks(value)
        }
    }
    ///Container type for all return fields from the `stateCommitment` function with signature `stateCommitment()` and selector `0xd800741e`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct StateCommitmentReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `verifiedBlocks` function with signature `verifiedBlocks()` and selector `0x8498067e`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct VerifiedBlocksReturn(pub ::ethers::core::types::U256);
}
