pub use upgrade_box::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod upgrade_box {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::None,
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("IS_SCRIPT"),
                    ::std::vec![::ethers::core::abi::ethabi::Function {
                        name: ::std::borrow::ToOwned::to_owned("IS_SCRIPT"),
                        inputs: ::std::vec![],
                        outputs: ::std::vec![::ethers::core::abi::ethabi::Param {
                            name: ::std::string::String::new(),
                            kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                            internal_type: ::core::option::Option::Some(
                                ::std::borrow::ToOwned::to_owned("bool"),
                            ),
                        },],
                        constant: ::core::option::Option::None,
                        state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                    },],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("run"),
                    ::std::vec![::ethers::core::abi::ethabi::Function {
                        name: ::std::borrow::ToOwned::to_owned("run"),
                        inputs: ::std::vec![
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("admin"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("address"),
                                ),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("mostRecentlyDeployedProxy",),
                                kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("address"),
                                ),
                            },
                        ],
                        outputs: ::std::vec![::ethers::core::abi::ethabi::Param {
                            name: ::std::string::String::new(),
                            kind: ::ethers::core::abi::ethabi::ParamType::Address,
                            internal_type: ::core::option::Option::Some(
                                ::std::borrow::ToOwned::to_owned("address"),
                            ),
                        },],
                        constant: ::core::option::Option::None,
                        state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                    },],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("upgradeBox"),
                    ::std::vec![::ethers::core::abi::ethabi::Function {
                        name: ::std::borrow::ToOwned::to_owned("upgradeBox"),
                        inputs: ::std::vec![
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("admin"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("address"),
                                ),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("proxyAddress"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("address"),
                                ),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("newBox"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("address"),
                                ),
                            },
                        ],
                        outputs: ::std::vec![::ethers::core::abi::ethabi::Param {
                            name: ::std::string::String::new(),
                            kind: ::ethers::core::abi::ethabi::ParamType::Address,
                            internal_type: ::core::option::Option::Some(
                                ::std::borrow::ToOwned::to_owned("address"),
                            ),
                        },],
                        constant: ::core::option::Option::None,
                        state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                    },],
                ),
            ]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::std::collections::BTreeMap::new(),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static UPGRADEBOX_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(__abi);
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\x80`@R`\x04\x80T`\x01`\xFF\x19\x91\x82\x16\x81\x17\x90\x92U`\x0C\x80T\x90\x91\x16\x90\x91\x17\x90U4\x80\x15a\0-W`\0\x80\xFD[Pa\x16\x16\x80a\0=`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0AW`\x005`\xE0\x1C\x80c1\xAB[P\x14a\0FW\x80c\xF8\xCC\xBFG\x14a\0vW\x80c\xFCM\xCA\xCB\x14a\0\x93W[`\0\x80\xFD[a\0Ya\0T6`\x04a\x01\xFAV[a\0\xA6V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[`\x0CTa\0\x83\x90`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\0mV[a\0Ya\0\xA16`\x04a\x02=V[a\x01\x8DV[`@Qc\xCAf\x9F\xA7`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x84\x16`\x04\x82\x01R`\0\x90\x83\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCAf\x9F\xA7\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x01\0W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x01\x14W=`\0\x80>=`\0\xFD[PP`@\x80Qc'\x8FyC`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x87\x81\x16`\x04\x83\x01R`$\x82\x01\x92\x90\x92R`\0`D\x82\x01R\x90\x84\x16\x92PcO\x1E\xF2\x86\x91P`d\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x01lW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x01\x80W=`\0\x80>=`\0\xFD[P\x92\x97\x96PPPPPPPV[`\0\x80`@Qa\x01\x9C\x90a\x01\xD1V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15a\x01\xB8W=`\0\x80>=`\0\xFD[P\x90P`\0a\x01\xC8\x85\x85\x84a\0\xA6V[\x95\x94PPPPPV[a\x13\x99\x80a\x02q\x839\x01\x90V[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x01\xF5W`\0\x80\xFD[\x91\x90PV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x02\x0FW`\0\x80\xFD[a\x02\x18\x84a\x01\xDEV[\x92Pa\x02&` \x85\x01a\x01\xDEV[\x91Pa\x024`@\x85\x01a\x01\xDEV[\x90P\x92P\x92P\x92V[`\0\x80`@\x83\x85\x03\x12\x15a\x02PW`\0\x80\xFD[a\x02Y\x83a\x01\xDEV[\x91Pa\x02g` \x84\x01a\x01\xDEV[\x90P\x92P\x92\x90PV\xFE`\xA0`@R0`\x80R4\x80\x15a\0\x14W`\0\x80\xFD[Pa\0\x1Da\0\"V[a\0\xD4V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x80Th\x01\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x15a\0rW`@Qc\xF9.\xE8\xA9`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80T`\x01`\x01`@\x1B\x03\x90\x81\x16\x14a\0\xD1W\x80T`\x01`\x01`@\x1B\x03\x19\x16`\x01`\x01`@\x1B\x03\x90\x81\x17\x82U`@Q\x90\x81R\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x90` \x01`@Q\x80\x91\x03\x90\xA1[PV[`\x80Qa\x12\x9Ca\0\xFD`\09`\0\x81\x81a\n\x94\x01R\x81\x81a\n\xBD\x01Ra\x0CB\x01Ra\x12\x9C`\0\xF3\xFE`\x80`@R`\x046\x10a\0\xF3W`\x005`\xE0\x1C\x80c\xB7'O\xBE\x11a\0\x8AW\x80c\xF1\xA0\xD1\xC8\x11a\0YW\x80c\xF1\xA0\xD1\xC8\x14a\x02\xC4W\x80c\xF2\xFD\xE3\x8B\x14a\x02\xE4W\x80c\xF3@\xFA\x01\x14a\x03\x04W\x80c\xF9`\x9F\x08\x14a\x03\x17W`\0\x80\xFD[\x80c\xB7'O\xBE\x14a\x02\\W\x80c\xC4\xD5\xE2:\x14a\x02|W\x80c\xC4\xEB{\xA4\x14a\x02\x9CW\x80c\xE0\x86\xE5\xEC\x14a\x02\xBCW`\0\x80\xFD[\x80c\x81)\xFC\x1C\x11a\0\xC6W\x80c\x81)\xFC\x1C\x14a\x01lW\x80c\x8D\xA5\xCB[\x14a\x01\x81W\x80c\x9A\xA3\xBBE\x14a\x01\xC8W\x80c\xAD<\xB1\xCC\x14a\x02\x1EW`\0\x80\xFD[\x80cO\x1E\xF2\x86\x14a\0\xF8W\x80cR\xD1\x90-\x14a\x01\rW\x80cqP\x18\xA6\x14a\x015W\x80cq\xD8\xCA\x0B\x14a\x01JW[`\0\x80\xFD[a\x01\x0Ba\x01\x066`\x04a\x0F\xC2V[a\x03*V[\0[4\x80\x15a\x01\x19W`\0\x80\xFD[Pa\x01\"a\x03IV[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01AW`\0\x80\xFD[Pa\x01\x0Ba\x03fV[4\x80\x15a\x01VW`\0\x80\xFD[Pa\x01_a\x03zV[`@Qa\x01,\x91\x90a\x10\xBCV[4\x80\x15a\x01xW`\0\x80\xFD[Pa\x01\x0Ba\x04\x10V[4\x80\x15a\x01\x8DW`\0\x80\xFD[P\x7F\x90\x16\xD0\x9Dr\xD4\x0F\xDA\xE2\xFD\x8C\xEA\xC6\xB6#Lw\x06!O\xD3\x9C\x1C\xD1\xE6\t\xA0R\x8C\x19\x93\0T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01,V[4\x80\x15a\x01\xD4W`\0\x80\xFD[Pa\x02\x0Ea\x01\xE36`\x04a\x10\xF2V[`\0` \x81\x90R\x90\x81R`@\x90 \x80T`\x01\x82\x01T`\x02\x83\x01T`\x03\x90\x93\x01T\x91\x92`\xFF\x90\x91\x16\x91\x84V[`@Qa\x01,\x94\x93\x92\x91\x90a\x11\rV[4\x80\x15a\x02*W`\0\x80\xFD[Pa\x02O`@Q\x80`@\x01`@R\x80`\x05\x81R` \x01d\x03R\xE3\x02\xE3`\xDC\x1B\x81RP\x81V[`@Qa\x01,\x91\x90a\x11WV[4\x80\x15a\x02hW`\0\x80\xFD[Pa\x01\x0Ba\x02w6`\x04a\x11\x8AV[a\x05'V[4\x80\x15a\x02\x88W`\0\x80\xFD[Pa\x01\x0Ba\x02\x976`\x04a\x11\xABV[a\x05\x8FV[4\x80\x15a\x02\xA8W`\0\x80\xFD[Pa\x01\x0Ba\x02\xB76`\x04a\x11\xCDV[a\x06\xD2V[a\x01\x0Ba\x077V[4\x80\x15a\x02\xD0W`\0\x80\xFD[Pa\x01\x0Ba\x02\xDF6`\x04a\x11\xABV[a\x08\x17V[4\x80\x15a\x02\xF0W`\0\x80\xFD[Pa\x01\x0Ba\x02\xFF6`\x04a\x10\xF2V[a\t\x01V[a\x01\x0Ba\x03\x126`\x04a\x10\xF2V[a\tDV[a\x01\x0Ba\x03%6`\x04a\x11\xE6V[a\t\xC7V[a\x032a\n\x89V[a\x03;\x82a\x0B.V[a\x03E\x82\x82a\x0BuV[PPV[`\0a\x03Sa\x0C7V[P`\0\x80Q` a\x12p\x839\x81Q\x91R\x90V[a\x03na\x0C\x80V[a\x03x`\0a\x0C\xDBV[V[a\x03\xA6`@\x80Q`\x80\x81\x01\x90\x91R`\0\x80\x82R` \x82\x01\x90\x81R` \x01`\0\x81R` \x01`\0\x81RP\x90V[3`\0\x90\x81R` \x81\x81R`@\x91\x82\x90 \x82Q`\x80\x81\x01\x90\x93R\x80T\x83R`\x01\x81\x01T\x90\x91\x83\x01\x90`\xFF\x16`\x02\x81\x11\x15a\x03\xE2Wa\x03\xE2a\x10\x84V[`\x02\x81\x11\x15a\x03\xF3Wa\x03\xF3a\x10\x84V[\x81R` \x01`\x02\x82\x01T\x81R` \x01`\x03\x82\x01T\x81RPP\x90P\x90V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x80T`\x01`@\x1B\x81\x04`\xFF\x16\x15\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\0\x81\x15\x80\x15a\x04VWP\x82[\x90P`\0\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x01\x14\x80\x15a\x04sWP0;\x15[\x90P\x81\x15\x80\x15a\x04\x81WP\x80\x15[\x15a\x04\x9FW`@Qc\xF9.\xE8\xA9`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x84Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16`\x01\x17\x85U\x83\x15a\x04\xC9W\x84T`\xFF`@\x1B\x19\x16`\x01`@\x1B\x17\x85U[a\x04\xD23a\rLV[a\x04\xDAa\r]V[\x83\x15a\x05 W\x84T`\xFF`@\x1B\x19\x16\x85U`@Q`\x01\x81R\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x90` \x01`@Q\x80\x91\x03\x90\xA1[PPPPPV[3`\0\x90\x81R` \x81\x90R`@\x81 T\x90\x03a\x05VW`@Qc\xF8\"\x86Y`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3`\0\x90\x81R` \x81\x90R`@\x90 `\x01\x90\x81\x01\x80T\x83\x92`\xFF\x19\x90\x91\x16\x90\x83`\x02\x81\x11\x15a\x05\x87Wa\x05\x87a\x10\x84V[\x02\x17\x90UPPV[\x81`\0\x03a\x05\xB0W`@Qcia\x07\x13`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80`\0\x03a\x05\xD1W`@Qc0\n\xA2\r`\xE2\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3`\0\x90\x81R` \x81\x90R`@\x81 T\x90\x03a\x06\0W`@Qc\xF8\"\x86Y`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3`\0\x90\x81R` \x81\x81R`@\x80\x83 \x81Q`\x80\x81\x01\x90\x92R\x80T\x82R`\x01\x81\x01T\x91\x92\x90\x91\x90\x83\x01\x90`\xFF\x16`\x02\x81\x11\x15a\x06>Wa\x06>a\x10\x84V[`\x02\x81\x11\x15a\x06OWa\x06Oa\x10\x84V[\x81R`\x02\x82\x81\x01T` \x80\x84\x01\x91\x90\x91R`\x03\x90\x93\x01T`@\x92\x83\x01R\x86\x84R``\x84\x01\x86\x90R3`\0\x90\x81R\x80\x84R\x91\x90\x91 \x83Q\x81U\x91\x83\x01Q`\x01\x80\x84\x01\x80T\x95\x96P\x86\x95\x92\x93\x90\x92`\xFF\x19\x16\x91\x90\x84\x90\x81\x11\x15a\x06\xB2Wa\x06\xB2a\x10\x84V[\x02\x17\x90UP`@\x82\x01Q`\x02\x82\x01U``\x90\x91\x01Q`\x03\x90\x91\x01UPPPV[\x80`\0\x03a\x06\xF3W`@Qc0\n\xA2\r`\xE2\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3`\0\x90\x81R` \x81\x90R`@\x81 T\x90\x03a\x07\"W`@Qc\xF8\"\x86Y`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3`\0\x90\x81R` \x81\x90R`@\x90 `\x03\x01UV[3`\0\x90\x81R` \x81\x90R`@\x81 T\x90\x03a\x07fW`@Qc\xF8\"\x86Y`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3`\0\x90\x81R` \x81\x90R`@\x81 `\x02\x01T\x90\x03a\x07\x98W`@Qc3J\xB3\xF5`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3`\0\x81\x81R` \x81\x90R`@\x80\x82 `\x02\x01\x80T\x90\x83\x90U\x90Q\x90\x92\x90\x83\x90\x83\x81\x81\x81\x85\x87Z\xF1\x92PPP=\x80`\0\x81\x14a\x07\xF0W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x07\xF5V[``\x91P[PP\x90P\x80a\x03EW`@Qc\r\xCF5\xDB`\xE4\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3`\0\x90\x81R` \x81\x90R`@\x90 T\x15a\x08EW`@Qc\x16\xA6\xB8C`\xE3\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81`\0\x03a\x08fW`@Qcia\x07\x13`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80`\0\x03a\x08\x87W`@Qc0\n\xA2\r`\xE2\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@\x80Q`\x80\x81\x01\x90\x91R\x82\x81R` \x81\x01`\0\x81R`\0` \x80\x83\x01\x82\x90R`@\x92\x83\x01\x85\x90R3\x82R\x81\x81R\x91\x90 \x82Q\x81U\x90\x82\x01Q`\x01\x80\x83\x01\x80T\x90\x91`\xFF\x19\x90\x91\x16\x90\x83`\x02\x81\x11\x15a\x08\xE2Wa\x08\xE2a\x10\x84V[\x02\x17\x90UP`@\x82\x01Q`\x02\x82\x01U``\x90\x91\x01Q`\x03\x90\x91\x01UPPV[a\t\ta\x0C\x80V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\t8W`@Qc\x1EO\xBD\xF7`\xE0\x1B\x81R`\0`\x04\x82\x01R`$\x01[`@Q\x80\x91\x03\x90\xFD[a\tA\x81a\x0C\xDBV[PV[4`\0\x03a\teW`@Qc\xA0C\x9C\x1F`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3`\0\x90\x81R` \x81\x90R`@\x81 T\x90\x03a\t\x94W`@Qc\xF8\"\x86Y`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x81\x16`\0\x90\x81R` \x81\x90R`@\x81 `\x02\x01\x80T4\x92\x90a\t\xBF\x90\x84\x90a\x12\x19V[\x90\x91UPPPV[4`\0\x03a\t\xE8W`@Qc\xA0C\x9C\x1F`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x82\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x15\x80\x15a\n$WP`\x01`\x01`\xA0\x1B\x03\x81\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x15[\x15a\nBW`@Qc\xF8\"\x86Y`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81`\x01`\x01`\xA0\x1B\x03\x81\x16a\nTWP\x80[`\x01`\x01`\xA0\x1B\x03\x81\x16`\0\x90\x81R` \x81\x90R`@\x81 `\x02\x01\x80T4\x92\x90a\n\x7F\x90\x84\x90a\x12\x19V[\x90\x91UPPPPPV[0`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14\x80a\x0B\x10WP\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16a\x0B\x04`\0\x80Q` a\x12p\x839\x81Q\x91RT`\x01`\x01`\xA0\x1B\x03\x16\x90V[`\x01`\x01`\xA0\x1B\x03\x16\x14\x15[\x15a\x03xW`@Qcp>F\xDD`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x0B6a\x0C\x80V[`@Q`\x01`\x01`\xA0\x1B\x03\x82\x16\x81R\x7F\xF7\x87!\"n\xFE\x9A\x1B\xB6x\x18\x9A\x16\xD1UI(\xB9\xF2\x19.,\xB9>\xED\xA8;y\xFA@\0}\x90` \x01`@Q\x80\x91\x03\x90\xA1PV[\x81`\x01`\x01`\xA0\x1B\x03\x16cR\xD1\x90-`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x0B\xCFWP`@\x80Q`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01\x90\x92Ra\x0B\xCC\x91\x81\x01\x90a\x12:V[`\x01[a\x0B\xF7W`@QcL\x9C\x8C\xE3`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x83\x16`\x04\x82\x01R`$\x01a\t/V[`\0\x80Q` a\x12p\x839\x81Q\x91R\x81\x14a\x0C(W`@Qc*\x87Ri`\xE2\x1B\x81R`\x04\x81\x01\x82\x90R`$\x01a\t/V[a\x0C2\x83\x83a\reV[PPPV[0`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x03xW`@Qcp>F\xDD`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3a\x0C\xB2\x7F\x90\x16\xD0\x9Dr\xD4\x0F\xDA\xE2\xFD\x8C\xEA\xC6\xB6#Lw\x06!O\xD3\x9C\x1C\xD1\xE6\t\xA0R\x8C\x19\x93\0T`\x01`\x01`\xA0\x1B\x03\x16\x90V[`\x01`\x01`\xA0\x1B\x03\x16\x14a\x03xW`@Qc\x11\x8C\xDA\xA7`\xE0\x1B\x81R3`\x04\x82\x01R`$\x01a\t/V[\x7F\x90\x16\xD0\x9Dr\xD4\x0F\xDA\xE2\xFD\x8C\xEA\xC6\xB6#Lw\x06!O\xD3\x9C\x1C\xD1\xE6\t\xA0R\x8C\x19\x93\0\x80T`\x01`\x01`\xA0\x1B\x03\x19\x81\x16`\x01`\x01`\xA0\x1B\x03\x84\x81\x16\x91\x82\x17\x84U`@Q\x92\x16\x91\x82\x90\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x90`\0\x90\xA3PPPV[a\rTa\r\xBBV[a\tA\x81a\x0E\x04V[a\x03xa\r\xBBV[a\rn\x82a\x0E\x0CV[`@Q`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;\x90`\0\x90\xA2\x80Q\x15a\r\xB3Wa\x0C2\x82\x82a\x0EqV[a\x03Ea\x0E\xE9V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T`\x01`@\x1B\x90\x04`\xFF\x16a\x03xW`@Qc\x1A\xFC\xD7\x9F`\xE3\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\t\ta\r\xBBV[\x80`\x01`\x01`\xA0\x1B\x03\x16;`\0\x03a\x0EBW`@QcL\x9C\x8C\xE3`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x82\x16`\x04\x82\x01R`$\x01a\t/V[`\0\x80Q` a\x12p\x839\x81Q\x91R\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[```\0\x80\x84`\x01`\x01`\xA0\x1B\x03\x16\x84`@Qa\x0E\x8E\x91\x90a\x12SV[`\0`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80`\0\x81\x14a\x0E\xC9W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x0E\xCEV[``\x91P[P\x91P\x91Pa\x0E\xDE\x85\x83\x83a\x0F\x08V[\x92PPP[\x92\x91PPV[4\x15a\x03xW`@Qc\xB3\x98\x97\x9F`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[``\x82a\x0F\x1DWa\x0F\x18\x82a\x0FgV[a\x0F`V[\x81Q\x15\x80\x15a\x0F4WP`\x01`\x01`\xA0\x1B\x03\x84\x16;\x15[\x15a\x0F]W`@Qc\x99\x96\xB3\x15`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16`\x04\x82\x01R`$\x01a\t/V[P\x80[\x93\x92PPPV[\x80Q\x15a\x0FwW\x80Q\x80\x82` \x01\xFD[`@Qc\n\x12\xF5!`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x0F\xA7W`\0\x80\xFD[\x91\x90PV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0\x80`@\x83\x85\x03\x12\x15a\x0F\xD5W`\0\x80\xFD[a\x0F\xDE\x83a\x0F\x90V[\x91P` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x0F\xFBW`\0\x80\xFD[\x81\x85\x01\x91P\x85`\x1F\x83\x01\x12a\x10\x0FW`\0\x80\xFD[\x815\x81\x81\x11\x15a\x10!Wa\x10!a\x0F\xACV[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15a\x10IWa\x10Ia\x0F\xACV[\x81`@R\x82\x81R\x88` \x84\x87\x01\x01\x11\x15a\x10bW`\0\x80\xFD[\x82` \x86\x01` \x83\x017`\0` \x84\x83\x01\x01R\x80\x95PPPPPP\x92P\x92\x90PV[cNH{q`\xE0\x1B`\0R`!`\x04R`$`\0\xFD[`\x03\x81\x10a\x10\xB8WcNH{q`\xE0\x1B`\0R`!`\x04R`$`\0\xFD[\x90RV[\x81Q\x81R` \x80\x83\x01Q`\x80\x83\x01\x91a\x10\xD7\x90\x84\x01\x82a\x10\x9AV[P`@\x83\x01Q`@\x83\x01R``\x83\x01Q``\x83\x01R\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x11\x04W`\0\x80\xFD[a\x0F`\x82a\x0F\x90V[\x84\x81R`\x80\x81\x01a\x11!` \x83\x01\x86a\x10\x9AV[`@\x82\x01\x93\x90\x93R``\x01R\x92\x91PPV[`\0[\x83\x81\x10\x15a\x11NW\x81\x81\x01Q\x83\x82\x01R` \x01a\x116V[PP`\0\x91\x01RV[` \x81R`\0\x82Q\x80` \x84\x01Ra\x11v\x81`@\x85\x01` \x87\x01a\x113V[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x11\x9CW`\0\x80\xFD[\x815`\x03\x81\x10a\x0F`W`\0\x80\xFD[`\0\x80`@\x83\x85\x03\x12\x15a\x11\xBEW`\0\x80\xFD[PP\x805\x92` \x90\x91\x015\x91PV[`\0` \x82\x84\x03\x12\x15a\x11\xDFW`\0\x80\xFD[P5\x91\x90PV[`\0\x80`@\x83\x85\x03\x12\x15a\x11\xF9W`\0\x80\xFD[a\x12\x02\x83a\x0F\x90V[\x91Pa\x12\x10` \x84\x01a\x0F\x90V[\x90P\x92P\x92\x90PV[\x80\x82\x01\x80\x82\x11\x15a\x0E\xE3WcNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\0` \x82\x84\x03\x12\x15a\x12LW`\0\x80\xFD[PQ\x91\x90PV[`\0\x82Qa\x12e\x81\x84` \x87\x01a\x113V[\x91\x90\x91\x01\x92\x91PPV\xFE6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC\xA1dsolcC\0\x08\x17\0\n\xA1dsolcC\0\x08\x17\0\n";
    /// The bytecode of the contract.
    pub static UPGRADEBOX_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0AW`\x005`\xE0\x1C\x80c1\xAB[P\x14a\0FW\x80c\xF8\xCC\xBFG\x14a\0vW\x80c\xFCM\xCA\xCB\x14a\0\x93W[`\0\x80\xFD[a\0Ya\0T6`\x04a\x01\xFAV[a\0\xA6V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[`\x0CTa\0\x83\x90`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\0mV[a\0Ya\0\xA16`\x04a\x02=V[a\x01\x8DV[`@Qc\xCAf\x9F\xA7`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x84\x16`\x04\x82\x01R`\0\x90\x83\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCAf\x9F\xA7\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x01\0W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x01\x14W=`\0\x80>=`\0\xFD[PP`@\x80Qc'\x8FyC`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x87\x81\x16`\x04\x83\x01R`$\x82\x01\x92\x90\x92R`\0`D\x82\x01R\x90\x84\x16\x92PcO\x1E\xF2\x86\x91P`d\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x01lW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x01\x80W=`\0\x80>=`\0\xFD[P\x92\x97\x96PPPPPPPV[`\0\x80`@Qa\x01\x9C\x90a\x01\xD1V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15a\x01\xB8W=`\0\x80>=`\0\xFD[P\x90P`\0a\x01\xC8\x85\x85\x84a\0\xA6V[\x95\x94PPPPPV[a\x13\x99\x80a\x02q\x839\x01\x90V[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x01\xF5W`\0\x80\xFD[\x91\x90PV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x02\x0FW`\0\x80\xFD[a\x02\x18\x84a\x01\xDEV[\x92Pa\x02&` \x85\x01a\x01\xDEV[\x91Pa\x024`@\x85\x01a\x01\xDEV[\x90P\x92P\x92P\x92V[`\0\x80`@\x83\x85\x03\x12\x15a\x02PW`\0\x80\xFD[a\x02Y\x83a\x01\xDEV[\x91Pa\x02g` \x84\x01a\x01\xDEV[\x90P\x92P\x92\x90PV\xFE`\xA0`@R0`\x80R4\x80\x15a\0\x14W`\0\x80\xFD[Pa\0\x1Da\0\"V[a\0\xD4V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x80Th\x01\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x15a\0rW`@Qc\xF9.\xE8\xA9`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80T`\x01`\x01`@\x1B\x03\x90\x81\x16\x14a\0\xD1W\x80T`\x01`\x01`@\x1B\x03\x19\x16`\x01`\x01`@\x1B\x03\x90\x81\x17\x82U`@Q\x90\x81R\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x90` \x01`@Q\x80\x91\x03\x90\xA1[PV[`\x80Qa\x12\x9Ca\0\xFD`\09`\0\x81\x81a\n\x94\x01R\x81\x81a\n\xBD\x01Ra\x0CB\x01Ra\x12\x9C`\0\xF3\xFE`\x80`@R`\x046\x10a\0\xF3W`\x005`\xE0\x1C\x80c\xB7'O\xBE\x11a\0\x8AW\x80c\xF1\xA0\xD1\xC8\x11a\0YW\x80c\xF1\xA0\xD1\xC8\x14a\x02\xC4W\x80c\xF2\xFD\xE3\x8B\x14a\x02\xE4W\x80c\xF3@\xFA\x01\x14a\x03\x04W\x80c\xF9`\x9F\x08\x14a\x03\x17W`\0\x80\xFD[\x80c\xB7'O\xBE\x14a\x02\\W\x80c\xC4\xD5\xE2:\x14a\x02|W\x80c\xC4\xEB{\xA4\x14a\x02\x9CW\x80c\xE0\x86\xE5\xEC\x14a\x02\xBCW`\0\x80\xFD[\x80c\x81)\xFC\x1C\x11a\0\xC6W\x80c\x81)\xFC\x1C\x14a\x01lW\x80c\x8D\xA5\xCB[\x14a\x01\x81W\x80c\x9A\xA3\xBBE\x14a\x01\xC8W\x80c\xAD<\xB1\xCC\x14a\x02\x1EW`\0\x80\xFD[\x80cO\x1E\xF2\x86\x14a\0\xF8W\x80cR\xD1\x90-\x14a\x01\rW\x80cqP\x18\xA6\x14a\x015W\x80cq\xD8\xCA\x0B\x14a\x01JW[`\0\x80\xFD[a\x01\x0Ba\x01\x066`\x04a\x0F\xC2V[a\x03*V[\0[4\x80\x15a\x01\x19W`\0\x80\xFD[Pa\x01\"a\x03IV[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01AW`\0\x80\xFD[Pa\x01\x0Ba\x03fV[4\x80\x15a\x01VW`\0\x80\xFD[Pa\x01_a\x03zV[`@Qa\x01,\x91\x90a\x10\xBCV[4\x80\x15a\x01xW`\0\x80\xFD[Pa\x01\x0Ba\x04\x10V[4\x80\x15a\x01\x8DW`\0\x80\xFD[P\x7F\x90\x16\xD0\x9Dr\xD4\x0F\xDA\xE2\xFD\x8C\xEA\xC6\xB6#Lw\x06!O\xD3\x9C\x1C\xD1\xE6\t\xA0R\x8C\x19\x93\0T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01,V[4\x80\x15a\x01\xD4W`\0\x80\xFD[Pa\x02\x0Ea\x01\xE36`\x04a\x10\xF2V[`\0` \x81\x90R\x90\x81R`@\x90 \x80T`\x01\x82\x01T`\x02\x83\x01T`\x03\x90\x93\x01T\x91\x92`\xFF\x90\x91\x16\x91\x84V[`@Qa\x01,\x94\x93\x92\x91\x90a\x11\rV[4\x80\x15a\x02*W`\0\x80\xFD[Pa\x02O`@Q\x80`@\x01`@R\x80`\x05\x81R` \x01d\x03R\xE3\x02\xE3`\xDC\x1B\x81RP\x81V[`@Qa\x01,\x91\x90a\x11WV[4\x80\x15a\x02hW`\0\x80\xFD[Pa\x01\x0Ba\x02w6`\x04a\x11\x8AV[a\x05'V[4\x80\x15a\x02\x88W`\0\x80\xFD[Pa\x01\x0Ba\x02\x976`\x04a\x11\xABV[a\x05\x8FV[4\x80\x15a\x02\xA8W`\0\x80\xFD[Pa\x01\x0Ba\x02\xB76`\x04a\x11\xCDV[a\x06\xD2V[a\x01\x0Ba\x077V[4\x80\x15a\x02\xD0W`\0\x80\xFD[Pa\x01\x0Ba\x02\xDF6`\x04a\x11\xABV[a\x08\x17V[4\x80\x15a\x02\xF0W`\0\x80\xFD[Pa\x01\x0Ba\x02\xFF6`\x04a\x10\xF2V[a\t\x01V[a\x01\x0Ba\x03\x126`\x04a\x10\xF2V[a\tDV[a\x01\x0Ba\x03%6`\x04a\x11\xE6V[a\t\xC7V[a\x032a\n\x89V[a\x03;\x82a\x0B.V[a\x03E\x82\x82a\x0BuV[PPV[`\0a\x03Sa\x0C7V[P`\0\x80Q` a\x12p\x839\x81Q\x91R\x90V[a\x03na\x0C\x80V[a\x03x`\0a\x0C\xDBV[V[a\x03\xA6`@\x80Q`\x80\x81\x01\x90\x91R`\0\x80\x82R` \x82\x01\x90\x81R` \x01`\0\x81R` \x01`\0\x81RP\x90V[3`\0\x90\x81R` \x81\x81R`@\x91\x82\x90 \x82Q`\x80\x81\x01\x90\x93R\x80T\x83R`\x01\x81\x01T\x90\x91\x83\x01\x90`\xFF\x16`\x02\x81\x11\x15a\x03\xE2Wa\x03\xE2a\x10\x84V[`\x02\x81\x11\x15a\x03\xF3Wa\x03\xF3a\x10\x84V[\x81R` \x01`\x02\x82\x01T\x81R` \x01`\x03\x82\x01T\x81RPP\x90P\x90V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x80T`\x01`@\x1B\x81\x04`\xFF\x16\x15\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\0\x81\x15\x80\x15a\x04VWP\x82[\x90P`\0\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x01\x14\x80\x15a\x04sWP0;\x15[\x90P\x81\x15\x80\x15a\x04\x81WP\x80\x15[\x15a\x04\x9FW`@Qc\xF9.\xE8\xA9`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x84Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16`\x01\x17\x85U\x83\x15a\x04\xC9W\x84T`\xFF`@\x1B\x19\x16`\x01`@\x1B\x17\x85U[a\x04\xD23a\rLV[a\x04\xDAa\r]V[\x83\x15a\x05 W\x84T`\xFF`@\x1B\x19\x16\x85U`@Q`\x01\x81R\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x90` \x01`@Q\x80\x91\x03\x90\xA1[PPPPPV[3`\0\x90\x81R` \x81\x90R`@\x81 T\x90\x03a\x05VW`@Qc\xF8\"\x86Y`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3`\0\x90\x81R` \x81\x90R`@\x90 `\x01\x90\x81\x01\x80T\x83\x92`\xFF\x19\x90\x91\x16\x90\x83`\x02\x81\x11\x15a\x05\x87Wa\x05\x87a\x10\x84V[\x02\x17\x90UPPV[\x81`\0\x03a\x05\xB0W`@Qcia\x07\x13`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80`\0\x03a\x05\xD1W`@Qc0\n\xA2\r`\xE2\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3`\0\x90\x81R` \x81\x90R`@\x81 T\x90\x03a\x06\0W`@Qc\xF8\"\x86Y`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3`\0\x90\x81R` \x81\x81R`@\x80\x83 \x81Q`\x80\x81\x01\x90\x92R\x80T\x82R`\x01\x81\x01T\x91\x92\x90\x91\x90\x83\x01\x90`\xFF\x16`\x02\x81\x11\x15a\x06>Wa\x06>a\x10\x84V[`\x02\x81\x11\x15a\x06OWa\x06Oa\x10\x84V[\x81R`\x02\x82\x81\x01T` \x80\x84\x01\x91\x90\x91R`\x03\x90\x93\x01T`@\x92\x83\x01R\x86\x84R``\x84\x01\x86\x90R3`\0\x90\x81R\x80\x84R\x91\x90\x91 \x83Q\x81U\x91\x83\x01Q`\x01\x80\x84\x01\x80T\x95\x96P\x86\x95\x92\x93\x90\x92`\xFF\x19\x16\x91\x90\x84\x90\x81\x11\x15a\x06\xB2Wa\x06\xB2a\x10\x84V[\x02\x17\x90UP`@\x82\x01Q`\x02\x82\x01U``\x90\x91\x01Q`\x03\x90\x91\x01UPPPV[\x80`\0\x03a\x06\xF3W`@Qc0\n\xA2\r`\xE2\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3`\0\x90\x81R` \x81\x90R`@\x81 T\x90\x03a\x07\"W`@Qc\xF8\"\x86Y`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3`\0\x90\x81R` \x81\x90R`@\x90 `\x03\x01UV[3`\0\x90\x81R` \x81\x90R`@\x81 T\x90\x03a\x07fW`@Qc\xF8\"\x86Y`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3`\0\x90\x81R` \x81\x90R`@\x81 `\x02\x01T\x90\x03a\x07\x98W`@Qc3J\xB3\xF5`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3`\0\x81\x81R` \x81\x90R`@\x80\x82 `\x02\x01\x80T\x90\x83\x90U\x90Q\x90\x92\x90\x83\x90\x83\x81\x81\x81\x85\x87Z\xF1\x92PPP=\x80`\0\x81\x14a\x07\xF0W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x07\xF5V[``\x91P[PP\x90P\x80a\x03EW`@Qc\r\xCF5\xDB`\xE4\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3`\0\x90\x81R` \x81\x90R`@\x90 T\x15a\x08EW`@Qc\x16\xA6\xB8C`\xE3\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81`\0\x03a\x08fW`@Qcia\x07\x13`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80`\0\x03a\x08\x87W`@Qc0\n\xA2\r`\xE2\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@\x80Q`\x80\x81\x01\x90\x91R\x82\x81R` \x81\x01`\0\x81R`\0` \x80\x83\x01\x82\x90R`@\x92\x83\x01\x85\x90R3\x82R\x81\x81R\x91\x90 \x82Q\x81U\x90\x82\x01Q`\x01\x80\x83\x01\x80T\x90\x91`\xFF\x19\x90\x91\x16\x90\x83`\x02\x81\x11\x15a\x08\xE2Wa\x08\xE2a\x10\x84V[\x02\x17\x90UP`@\x82\x01Q`\x02\x82\x01U``\x90\x91\x01Q`\x03\x90\x91\x01UPPV[a\t\ta\x0C\x80V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\t8W`@Qc\x1EO\xBD\xF7`\xE0\x1B\x81R`\0`\x04\x82\x01R`$\x01[`@Q\x80\x91\x03\x90\xFD[a\tA\x81a\x0C\xDBV[PV[4`\0\x03a\teW`@Qc\xA0C\x9C\x1F`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3`\0\x90\x81R` \x81\x90R`@\x81 T\x90\x03a\t\x94W`@Qc\xF8\"\x86Y`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x81\x16`\0\x90\x81R` \x81\x90R`@\x81 `\x02\x01\x80T4\x92\x90a\t\xBF\x90\x84\x90a\x12\x19V[\x90\x91UPPPV[4`\0\x03a\t\xE8W`@Qc\xA0C\x9C\x1F`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x82\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x15\x80\x15a\n$WP`\x01`\x01`\xA0\x1B\x03\x81\x16`\0\x90\x81R` \x81\x90R`@\x90 T\x15[\x15a\nBW`@Qc\xF8\"\x86Y`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81`\x01`\x01`\xA0\x1B\x03\x81\x16a\nTWP\x80[`\x01`\x01`\xA0\x1B\x03\x81\x16`\0\x90\x81R` \x81\x90R`@\x81 `\x02\x01\x80T4\x92\x90a\n\x7F\x90\x84\x90a\x12\x19V[\x90\x91UPPPPPV[0`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14\x80a\x0B\x10WP\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16a\x0B\x04`\0\x80Q` a\x12p\x839\x81Q\x91RT`\x01`\x01`\xA0\x1B\x03\x16\x90V[`\x01`\x01`\xA0\x1B\x03\x16\x14\x15[\x15a\x03xW`@Qcp>F\xDD`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x0B6a\x0C\x80V[`@Q`\x01`\x01`\xA0\x1B\x03\x82\x16\x81R\x7F\xF7\x87!\"n\xFE\x9A\x1B\xB6x\x18\x9A\x16\xD1UI(\xB9\xF2\x19.,\xB9>\xED\xA8;y\xFA@\0}\x90` \x01`@Q\x80\x91\x03\x90\xA1PV[\x81`\x01`\x01`\xA0\x1B\x03\x16cR\xD1\x90-`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x0B\xCFWP`@\x80Q`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01\x90\x92Ra\x0B\xCC\x91\x81\x01\x90a\x12:V[`\x01[a\x0B\xF7W`@QcL\x9C\x8C\xE3`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x83\x16`\x04\x82\x01R`$\x01a\t/V[`\0\x80Q` a\x12p\x839\x81Q\x91R\x81\x14a\x0C(W`@Qc*\x87Ri`\xE2\x1B\x81R`\x04\x81\x01\x82\x90R`$\x01a\t/V[a\x0C2\x83\x83a\reV[PPPV[0`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x03xW`@Qcp>F\xDD`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3a\x0C\xB2\x7F\x90\x16\xD0\x9Dr\xD4\x0F\xDA\xE2\xFD\x8C\xEA\xC6\xB6#Lw\x06!O\xD3\x9C\x1C\xD1\xE6\t\xA0R\x8C\x19\x93\0T`\x01`\x01`\xA0\x1B\x03\x16\x90V[`\x01`\x01`\xA0\x1B\x03\x16\x14a\x03xW`@Qc\x11\x8C\xDA\xA7`\xE0\x1B\x81R3`\x04\x82\x01R`$\x01a\t/V[\x7F\x90\x16\xD0\x9Dr\xD4\x0F\xDA\xE2\xFD\x8C\xEA\xC6\xB6#Lw\x06!O\xD3\x9C\x1C\xD1\xE6\t\xA0R\x8C\x19\x93\0\x80T`\x01`\x01`\xA0\x1B\x03\x19\x81\x16`\x01`\x01`\xA0\x1B\x03\x84\x81\x16\x91\x82\x17\x84U`@Q\x92\x16\x91\x82\x90\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x90`\0\x90\xA3PPPV[a\rTa\r\xBBV[a\tA\x81a\x0E\x04V[a\x03xa\r\xBBV[a\rn\x82a\x0E\x0CV[`@Q`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;\x90`\0\x90\xA2\x80Q\x15a\r\xB3Wa\x0C2\x82\x82a\x0EqV[a\x03Ea\x0E\xE9V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T`\x01`@\x1B\x90\x04`\xFF\x16a\x03xW`@Qc\x1A\xFC\xD7\x9F`\xE3\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\t\ta\r\xBBV[\x80`\x01`\x01`\xA0\x1B\x03\x16;`\0\x03a\x0EBW`@QcL\x9C\x8C\xE3`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x82\x16`\x04\x82\x01R`$\x01a\t/V[`\0\x80Q` a\x12p\x839\x81Q\x91R\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[```\0\x80\x84`\x01`\x01`\xA0\x1B\x03\x16\x84`@Qa\x0E\x8E\x91\x90a\x12SV[`\0`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80`\0\x81\x14a\x0E\xC9W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x0E\xCEV[``\x91P[P\x91P\x91Pa\x0E\xDE\x85\x83\x83a\x0F\x08V[\x92PPP[\x92\x91PPV[4\x15a\x03xW`@Qc\xB3\x98\x97\x9F`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[``\x82a\x0F\x1DWa\x0F\x18\x82a\x0FgV[a\x0F`V[\x81Q\x15\x80\x15a\x0F4WP`\x01`\x01`\xA0\x1B\x03\x84\x16;\x15[\x15a\x0F]W`@Qc\x99\x96\xB3\x15`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16`\x04\x82\x01R`$\x01a\t/V[P\x80[\x93\x92PPPV[\x80Q\x15a\x0FwW\x80Q\x80\x82` \x01\xFD[`@Qc\n\x12\xF5!`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x0F\xA7W`\0\x80\xFD[\x91\x90PV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0\x80`@\x83\x85\x03\x12\x15a\x0F\xD5W`\0\x80\xFD[a\x0F\xDE\x83a\x0F\x90V[\x91P` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x0F\xFBW`\0\x80\xFD[\x81\x85\x01\x91P\x85`\x1F\x83\x01\x12a\x10\x0FW`\0\x80\xFD[\x815\x81\x81\x11\x15a\x10!Wa\x10!a\x0F\xACV[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15a\x10IWa\x10Ia\x0F\xACV[\x81`@R\x82\x81R\x88` \x84\x87\x01\x01\x11\x15a\x10bW`\0\x80\xFD[\x82` \x86\x01` \x83\x017`\0` \x84\x83\x01\x01R\x80\x95PPPPPP\x92P\x92\x90PV[cNH{q`\xE0\x1B`\0R`!`\x04R`$`\0\xFD[`\x03\x81\x10a\x10\xB8WcNH{q`\xE0\x1B`\0R`!`\x04R`$`\0\xFD[\x90RV[\x81Q\x81R` \x80\x83\x01Q`\x80\x83\x01\x91a\x10\xD7\x90\x84\x01\x82a\x10\x9AV[P`@\x83\x01Q`@\x83\x01R``\x83\x01Q``\x83\x01R\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x11\x04W`\0\x80\xFD[a\x0F`\x82a\x0F\x90V[\x84\x81R`\x80\x81\x01a\x11!` \x83\x01\x86a\x10\x9AV[`@\x82\x01\x93\x90\x93R``\x01R\x92\x91PPV[`\0[\x83\x81\x10\x15a\x11NW\x81\x81\x01Q\x83\x82\x01R` \x01a\x116V[PP`\0\x91\x01RV[` \x81R`\0\x82Q\x80` \x84\x01Ra\x11v\x81`@\x85\x01` \x87\x01a\x113V[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x11\x9CW`\0\x80\xFD[\x815`\x03\x81\x10a\x0F`W`\0\x80\xFD[`\0\x80`@\x83\x85\x03\x12\x15a\x11\xBEW`\0\x80\xFD[PP\x805\x92` \x90\x91\x015\x91PV[`\0` \x82\x84\x03\x12\x15a\x11\xDFW`\0\x80\xFD[P5\x91\x90PV[`\0\x80`@\x83\x85\x03\x12\x15a\x11\xF9W`\0\x80\xFD[a\x12\x02\x83a\x0F\x90V[\x91Pa\x12\x10` \x84\x01a\x0F\x90V[\x90P\x92P\x92\x90PV[\x80\x82\x01\x80\x82\x11\x15a\x0E\xE3WcNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\0` \x82\x84\x03\x12\x15a\x12LW`\0\x80\xFD[PQ\x91\x90PV[`\0\x82Qa\x12e\x81\x84` \x87\x01a\x113V[\x91\x90\x91\x01\x92\x91PPV\xFE6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC\xA1dsolcC\0\x08\x17\0\n\xA1dsolcC\0\x08\x17\0\n";
    /// The deployed bytecode of the contract.
    pub static UPGRADEBOX_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct UpgradeBox<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for UpgradeBox<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for UpgradeBox<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for UpgradeBox<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for UpgradeBox<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(UpgradeBox))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> UpgradeBox<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                UPGRADEBOX_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                UPGRADEBOX_ABI.clone(),
                UPGRADEBOX_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `IS_SCRIPT` (0xf8ccbf47) function
        pub fn is_script(&self) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([248, 204, 191, 71], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `run` (0xfc4dcacb) function
        pub fn run(
            &self,
            admin: ::ethers::core::types::Address,
            most_recently_deployed_proxy: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([252, 77, 202, 203], (admin, most_recently_deployed_proxy))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `upgradeBox` (0x31ab5b50) function
        pub fn upgrade_box(
            &self,
            admin: ::ethers::core::types::Address,
            proxy_address: ::ethers::core::types::Address,
            new_box: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([49, 171, 91, 80], (admin, proxy_address, new_box))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>> for UpgradeBox<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "IS_SCRIPT", abi = "IS_SCRIPT()")]
    pub struct IsScriptCall;
    ///Container type for all input parameters for the `run` function with signature `run(address,address)` and selector `0xfc4dcacb`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "run", abi = "run(address,address)")]
    pub struct RunCall {
        pub admin: ::ethers::core::types::Address,
        pub most_recently_deployed_proxy: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `upgradeBox` function with signature `upgradeBox(address,address,address)` and selector `0x31ab5b50`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "upgradeBox", abi = "upgradeBox(address,address,address)")]
    pub struct UpgradeBoxCall {
        pub admin: ::ethers::core::types::Address,
        pub proxy_address: ::ethers::core::types::Address,
        pub new_box: ::ethers::core::types::Address,
    }
    ///Container type for all of the contract's call
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        serde::Serialize,
        serde::Deserialize,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub enum UpgradeBoxCalls {
        IsScript(IsScriptCall),
        Run(RunCall),
        UpgradeBox(UpgradeBoxCall),
    }
    impl ::ethers::core::abi::AbiDecode for UpgradeBoxCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <IsScriptCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::IsScript(decoded));
            }
            if let Ok(decoded) = <RunCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Run(decoded));
            }
            if let Ok(decoded) = <UpgradeBoxCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::UpgradeBox(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for UpgradeBoxCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::IsScript(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Run(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::UpgradeBox(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for UpgradeBoxCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::IsScript(element) => ::core::fmt::Display::fmt(element, f),
                Self::Run(element) => ::core::fmt::Display::fmt(element, f),
                Self::UpgradeBox(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<IsScriptCall> for UpgradeBoxCalls {
        fn from(value: IsScriptCall) -> Self {
            Self::IsScript(value)
        }
    }
    impl ::core::convert::From<RunCall> for UpgradeBoxCalls {
        fn from(value: RunCall) -> Self {
            Self::Run(value)
        }
    }
    impl ::core::convert::From<UpgradeBoxCall> for UpgradeBoxCalls {
        fn from(value: UpgradeBoxCall) -> Self {
            Self::UpgradeBox(value)
        }
    }
    ///Container type for all return fields from the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct IsScriptReturn(pub bool);
    ///Container type for all return fields from the `run` function with signature `run(address,address)` and selector `0xfc4dcacb`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct RunReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `upgradeBox` function with signature `upgradeBox(address,address,address)` and selector `0x31ab5b50`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct UpgradeBoxReturn(pub ::ethers::core::types::Address);
}
