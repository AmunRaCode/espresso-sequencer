@startuml
package "WWW" {
  component User
  package "HotShot" as HotShotExternal {
    component "Gossip" as GossipExternal
  }
}

package "Decentralized Sequencer" {
  package "zkEVM app" as zkApp {
    component Events
    component "Submit API" as Submit
    package "Txn-ordering HotShot app" as App {
      package HotShot {
        component "Gossip" as GossipInternal
        component "Events" as HotShotEvents
      }
    }
  }
}

package L2 {
  component JsonRPC
  component L2DB #lightgrey [
    L2 Blockchain DB

    blocks
    receipts
    logs
  ]
  package "Hermez Prover" as HermezProver {
    component Prover
    component Executor #lightgrey
    component Tree [
      L2 State DB
      Merkle Tree
    ]
  }
  component "Bridge L2" as BridgeL2 #lightgrey
  component "Rollup Coordinator" as RollupCoordinator
}


package L1 {
  component Rollup [
    Rollup Contract
  ]
  component "Bridge L1" as BridgeL1 #lightgrey
}

GossipInternal <-down-> GossipExternal
Prover .up.> BridgeL2

User --> JsonRPC: EVM txn, queries
JsonRPC -up-> Submit: EVM txn
JsonRPC --> L2DB: read
JsonRPC --> Tree: read
JsonRPC --> Executor: call, estimate gas

User --> BridgeL1
Submit -up-> App: wrap in HotShot txn
HotShotEvents -down-> Events

Executor --> Tree: execute (dry-run)
Prover --> Tree: apply txns
Events --> RollupCoordinator: stream\norder commit,\nQC,\nbatch
RollupCoordinator -up-> Prover: get proof
RollupCoordinator --> Rollup: order commit,\nQC, proof
@enduml
